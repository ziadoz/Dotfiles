# Extract compressed file based upon its extension
function extract() {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2) tar xvjf $1   ;;
            *.tar.gz)  tar xvzf $1   ;;
            *.bz2)     bunzip2 $1    ;;
            *.rar)     unrar x $1    ;;
            *.gz)      gunzip $1     ;;
            *.tar)     tar xvf $1    ;;
            *.tbz2)    tar xvjf $1   ;;
            *.tgz)     tar xvzf $1   ;;
            *.zip)     unzip $1      ;;
            *.Z)       uncompress $1 ;;
            *.7z)      7z x $1       ;;
            *)         echo "'$1' cannot be extracted via >extract<" ;;
        esac
      else
        echo "'$1' is not a valid file"
    fi
}

# Regenerate MAC address
# @see: http://jezenthomas.com/free-internet-on-trains/
remac() {
    sudo /System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport -z
    sudo ifconfig en0 ether $(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
    sudo networksetup -detectnewhardware
    echo $(ifconfig en0 | grep ether)
}

# Set DNS servers
# @see: http://osxdaily.com/2015/06/02/change-dns-command-line-mac-os-x/
# @see: http://osxdaily.com/2014/09/03/list-all-network-hardware-from-the-command-line-in-os-x/
# @see: https://superuser.com/questions/86184/change-dns-server-from-terminal-or-script-on-mac-os-x
# @see: https://superuser.com/questions/258151/how-do-i-check-what-dns-server-im-using-on-mac-os-x
setdns() {
    local dns_servers="${*:-192.168.0.3 1.1.1.1 1.0.0.1}"
    if [ "$(networksetup -getdnsservers Wi-Fi | tr '\n' ' ' | xargs)" != "$dns_servers" ]; then
        sudo networksetup -setdnsservers Wi-Fi empty
        sudo networksetup -setdnsservers Wi-Fi $dns_servers
        echo "DNS servers set: $(networksetup -getdnsservers Wi-Fi | tr '\n' ' ' | xargs)"
    else
        echo "DNS servers already set: $(networksetup -getdnsservers Wi-Fi | tr '\n' ' ' | xargs)"
    fi
}


# Download a snapshot of a webpage to a single HTML file
# @see: https://github.com/gildas-lormeau/SingleFile
singlefile() {
    if [ "$(command -v docker)" ]; then
        docker run capsulecode/singlefile "$1" > "$2"
    else
        echo "Docker needs to be installed to run SingleFile"
    fi   
}

# Encrypt and decrypt files quickly
function enc() {
    openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 1000000 -salt -in "$1" -out "$1.enc"
}

function dec() {
    openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 -iter 1000000 -in "$1" -out "$(basename $1 .enc)"
}

# Sync 1Password 7 Vault
function syncvault() {
    echo "Backing up 1Password to iCloud..."
    rsync --archive --compress --progress --verbose --quiet "/Users/Jamie/Dropbox/1Password/1Password.opvault" "/Users/Jamie/Library/Mobile Documents/com~apple~CloudDocs/1Password/"

    echo "Backing up 1Password to NAS..."
    rsync --archive --compress --progress --verbose --quiet "/Users/Jamie/Dropbox/1Password/1Password.opvault" "/Volumes/files/Backups/1Password/"
}
