[user]
    name = {{ git.name }}
    email = {{ git.email }}
[core]
	excludesfile = ~/.gitignore
[color]
	ui = auto
[alias]
    ################
    # List Aliases #
    ################

    aliases = "!f() { git config -l | grep alias | cut -c 7-; }; f"

    ########
    # Tags #
    ########

    tags = tag
    latest = describe --tags --abbrev=0

    # Destroy a remote tag
    tagdestroy = "!f() { git push --delete ${2:-origin} $1; }; f"

    #################
    # Push and Pull #
    #################

    sync = "!f() { git pull $@ && git push $@; }; f"

    # https://tekin.co.uk/2020/01/git-alias-to-push-and-set-upstream-trackng-on-a-branch
    upstream = "!f() { git push -u origin HEAD }; f"

    #########
    # Stash #
    #########

    # https://stackoverflow.com/questions/9057387/process-all-arguments-except-the-first-one-in-a-bash-script

    # List all stashes
    stashes = stash list

    # Stash one or more files
    stashbackup = "!f() { git stash save --include-untracked $@; }; f"

    # Restore a stash
    stashrestore = "!f() { git stash apply stash@{${1:-0}}; }; f"

    # Diff between stash and branch
    stashdiff = "!f() { git diff stash@{${1:-0}} ${@:2}; }; f"

    ########
    # Undo #
    ########

    # https://stackoverflow.com/questions/3321492/
    # https://twitter.com/coderabbi/status/904708039533584387

    # Undo the last commit
    undo = "!f() { git reset --soft HEAD~1; }; f"

    # Wipe the staging area
    wipe = "!f() { git reset --hard && git clean -f; }; f"

    # Discards changes on one or more files
    discard = "!f() { git checkout -- $@; }; f"

    # Realign branch to a specifc remote
    realign = "!f() { BRANCH=$(git symbolic-ref --short HEAD); git reset --hard ${1:-origin}/$BRANCH; }; f"

    # Stage one or more files
    stage = "!f() { git add -- ${@}; }; f"

    # Unstage one or more files
    unstage = "!f() { git reset -- ${@}; }; f"

    ##########
    # Commit #
    ##########

    # https://gist.github.com/coderabbi/b0278212b2220fdf63746906fbb82770

    # Amend the last commit message
    amend = commit --amend

    # Commit by stepping through hunks
    hunk = add -p

    # Show the latest commit hash
    sha = rev-parse HEAD

    # Add to a previous commit
    fix = "!f() { git commit --fixup $1; GIT_SEQUENCE_EDITOR=touch git rebase -i $1^^ --autosquash --autostash; }; f"

    # Transplant a commit to another branch
    transplant = "!f() { BRANCH=$(git symbolic-ref --short HEAD); git stash save --include-untracked; git checkout $1; git cherry-pick $BRANCH; git checkout $BRANCH; git reset HEAD~ --hard; git checkout $1; git stash pop; }; f"

    #########
    # Patch #
    #########

    # https://robots.thoughtbot.com/send-a-patch-to-someone-using-git-format-patch

    # Format changes into a single (one) patch
    patchmake = "!f() { git format-patch $1 --stdout > $2; }; f"

    # Apply (force) a patch to apply using patch
    patchforce = "!f() { patch -p1 < $1; }; f"

    ##########
    # Branch #
    ##########

    # https://wesbos.com/git-hot-tips/

    # List branches
    branches = "branch --list --all"

    # Prune branches that no longer exist on remote
    branchesprune = "!f() { git remote prune "${1:-origin}"; }; f"
    
    # Dry run pruning branches that no longer exist on remote
    branchesdryprune = "!f() { git remote prune "${1:-origin}" --dry-run; }; f"

    # Jump back to most recent branch
    branchjump = git checkout -

    # Rename a branch
    branchrename = "!f() { git branch -m $1 $2; }; f"

    # Delete a branch
    branchdelete = "branch -D"

    # Delete a branch and its remote
    branchdestroy = "branch -Dr"

    # Create a branch
    branchcreate = "!f() { git checkout -b $1 $2; }; f"

    ##########
    # Remote #
    ##########

    # List all remotes
    remotes = remote -v

    #######
    # Log #
    #######

    # Log commits in pretty coloured format
    logpretty = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short

    # Log file changes in pretty coloured format
    logstat = "!git logpretty --numstat"

    # Log recent in pretty coloured format
    logdate = "!git logpretty --date=relative"

    # Log graph in pretty coloured format
    loggraph = "!git logpretty --graph"

    # Show file changes between two specified commits or the latest commit if none specified
    logstatdiff = "!f() { git logstat "${1:-HEAD}"^.."${1:-HEAD}"; }; f"

    # Diff between two specified commits or the latest commit if none specified
    logdiff = "!f() { git diff ${@:2} "${1:-HEAD}"^.."${1:-HEAD}"; }; f"

    ##############
    # Search #
    ##############

    # https://twitter.com/csswizardry/status/903196263763644416

    # Search logs for a string
    logsearch = "!f() { git logpretty -S$1; }; f"

    # Search logs using a regular expression
    loggrep = "!f() { git logpretty -G$1; }; f"

    # Grep repository file paths
    pathgrep = "!git ls-files | grep -i"

    # Grep file contents from the repository root
    filegrep = "!f() { CWD=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $CWD; }; f"

    ###########
    # Merging #
    ###########

    # Checkout our changes
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    
    # Checkout their changes
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    #############
    # Archiving #
    #############

    # Compress branch into a zip file.
    # Usage: git compress [BRANCH] [FILE]
    compress = "!f() { if [ -z "$1" ]; then BRANCH="$(git rev-parse --abbrev-ref HEAD)"; else BRANCH="$1"; fi; if [ -z "$2" ]; then DEST="$(echo "$BRANCH.zip" | sed -e 's|/|-|g')"; else DEST=$2; fi; git archive --format zip --output $DEST $BRANCH; }; f"
